--[[
This is a template for generating a config file for a system monitor conky.
The GNU m4 pre-processor is used for the generation.

To set the conkys colors, define some macros with empty values.
This can be done on invocation as: m4 -D white -D bg-black
If "white" is defined then set the text color to white.
If "bg-white" or "bg-black" is defined then add a tinted background with that color.

The environment variable "CONKYIF" specifies what network interface
that should be used.
CONKYIF=wlp1s0

The environment variable "CONKYFS" is a comma-separated list of paths
to mounted filesystems.
CONKYFS=/media/asd,/,/home

The environment variable "CONKYCPU" is an integer specifying the
amount of cores.
CONKYCPU=4

]]
define(`FG_COLOR', ifdef(`white', `ebebeb', `030303'))dnl
define(`BG_PATH', ifdef(`bg-white', `~/.config/conky/conky_bg_white.png', ifdef(`bg-black', ``~/.config/conky/conky_bg_black.png'')))dnl
undefine(`white', `black', `bg-black', `bg-white')dnl
define(`NETIF', esyscmd(`echo -en "\\x60"$CONKYIF"\\x27"'))dnl

conky.config = {
    alignment = 'top_left',
    background = false,
    border_width = 1,
    cpu_avg_samples = 2,

    draw_borders = false,
    draw_graph_borders = true,
    draw_outline = false,
    draw_shades = false,

    top_name_width = 10,

    use_xft = true,
    font = 'DejaVu Sans Mono:style=bold:size=12',
    gap_x = 50,
    gap_y = 100,
    minimum_height = 5,
    minimum_width = 5,
    net_avg_samples = 2,
    no_buffers = true,
    double_buffer = true,
    out_to_console = false,
    out_to_stderr = false,
    extra_newline = false,

    own_window = true,
    own_window_class = 'Conky',
    own_window_type = 'override',
    own_window_transparent = true,
    -- own_window_colour = 'ffffff',
    -- own_window_argb_visual = true,
    -- own_window_argb_value = 5,
    own_window_hints = 'undecorated,below,sticky,skip_taskbar,skip_pager',

    short_units = true,

    stippled_borders = 0,
    update_interval = 1.0,
    uppercase = false,
    use_spacer = 'left',
    show_graph_scale = false,
    show_graph_range = false,

    -- minimum_width = 450,
    -- minimum_size = 280,

    -- border_inner_margin = 50,

    default_outline_color = 'white',
    default_shade_color = 'white',

    default_color = 'FG_COLOR',
    color0 = 'FG_COLOR',
    color1 = 'FG_COLOR'
}

conky.text = [[
ifelse(BG_PATH, `', `', `${image BG_PATH -p -5,0}
')dnl
${alignc}$kernel
${alignc}${uptime}
$hr
define(`generate_fs', `ifelse(`$1', , , ` ${color1}esyscmd(`printf "\\x60%-10.10s\\x27" "$(basename "$1")"')${color}${fs_used_perc `$1'}%${color1}/${color}${fs_size `$1'} ${fs_bar 6 `$1'}
$0(shift($@))')')dnl
generate_fs(esyscmd(`echo -n "$CONKYFS" | sed "s/^/\\x60/;s/$/\\x27/;s/,/\\x27,\\x60/g"'))dnl
undefine(`generate_fs')dnl
$hr
${color1}ip: $color${addr NETIF}${alignr}DNS: ${nameserver 0}
${color1}Up:$color ${upspeed NETIF}${color}${alignr}${color1}Down:$color ${downspeed NETIF}
${color}Total: ${totalup NETIF}${alignr}Total: ${totaldown NETIF}
$hr
${color}Processes: $processes
define(`generate_cpu', `ifelse(eval(`$1 <= 0'), `1', , `${cpugauge cpu`'$1 30,50}ifelse(eval(`$1 > 1'), `1', `  $0(decr(`$1'))')')')dnl
${color}${alignc}generate_cpu(esyscmd(`echo -en "\\x60"${CONKYCPU:-0}"\\x27"'))
undefine(`generate_cpu')dnl
${color1} Name          CPU% | Name          MEM%$color
${color} ${top name 1} ${top cpu 1} | ${top_mem name 1} ${top_mem mem 1}
${color} ${top name 2} ${top cpu 2} | ${top_mem name 2} ${top_mem mem 2}
${color} ${top name 3} ${top cpu 3} | ${top_mem name 3} ${top_mem mem 3}
${color} ${top name 4} ${top cpu 4} | ${top_mem name 4} ${top_mem mem 4}
${color} ${top name 5} ${top cpu 5} | ${top_mem name 5} ${top_mem mem 5}
]]
