#!/bin/python

import argparse as A
import shlex
import subprocess as S
import os

TEMPVARS = ["HWMONCPU", "HWMONGPU"]

def addTempEnv(var):
   if var not in os.environ:
      return
   ind = os.environ[var].find("/")
   filename = os.environ[var][:ind]
   sensorname = os.environ[var][ind+1:]
   for hw in os.scandir("/sys/class/hwmon"):
      if hw.name.startswith("hwmon"):
         with open(os.path.join(hw.path, "name"), "r") as f:
            if f.read().rstrip("\n") == sensorname:
               os.environ[var] = os.path.join(hw.path, filename)
               break

def getPolybarOutputs():
   res = S.run(["polybar", "-m"], stdout=S.PIPE, text=True)
   return {l.split(":")[0] for l in res.stdout.split("\n") if l}

def startPolybar(args, monitor, monitorfallback=None):
   args = shlex.split(args)
   moreenv = {"MONITOR": monitor}
   if monitorfallback:
      moreenv["MONITORFALL"] = monitorfallback
   S.Popen(["polybar", *args], env={**moreenv, **os.environ})

def main():
   parser = A.ArgumentParser(description="helper script for starting polybar on multiple screens. "+str(TEMPVARS)+" are special environment variables on the form 'inputfile/sensorname'. This program modifies these variables so that they point to inputfile of the sensor with sensorname.")
   parser.add_argument("primary", nargs="+", help="primary outputs to start polybar on")
   parser.add_argument("-p", "--primary-args", help="string of to-be-split arguments given to the primary polybars", required=True)
   parser.add_argument("-s", "--secondary-args", help="string of to-be-split arguments given to the secondary polybars")
   parser.add_argument("-m", "--secondaries", action="store_true", help="whether to start secondary polybars on all other outputs")
   parser.add_argument("-f", "--fallback", default=[], nargs=2, action="append", metavar=("OUTPUT", "FALLBACK"), help="sets FALLBACK to be the fallback monitor of OUTPUT. An OUTPUT can have multiple fallbacks. This is used to compensate for polybar's fact that it reports incorrect available outputs when mirroring.")

   args = parser.parse_args()

   if args.secondaries and not args.secondary_args:
      parser.error("--secondary-args required if --secondaries")

   availableOutputs = getPolybarOutputs()
   if not availableOutputs:
      raise Exception("no available outputs :O")

   primaries = set(args.primary)

   for t in TEMPVARS:
      addTempEnv(t)

   fallbacks = {}
   for m,f in args.fallback:
      if m in fallbacks:
         fallbacks[m].append(f)
      else:
         fallbacks[m] = [f]

   used = set()
   for p in primaries:
      fallback = None
      if p not in availableOutputs:
         for f in fallbacks.get(p, []):
            if f in availableOutputs:
               fallback = f
               break

      if fallback:
         used.add(fallback)
      else:
         used.add(p)

      startPolybar(args.primary_args, p, fallback)

   if args.secondaries:
      for s in availableOutputs - used:
         startPolybar(args.secondary_args, s)

if __name__ == "__main__":
   main()


