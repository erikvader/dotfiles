#!/bin/python

"""
Script to generate user configs for bambu slicer and orca slicer.
"""

import sys
import itertools
from pathlib import Path
import json
from functools import cache, cached_property
from decimal import Decimal
import re
from types import MappingProxyType
from enum import Enum
import tomllib

# TODO: nested lists and objects aren't protected. Should probably use some custom made class?
read_only_dict = MappingProxyType

expr_prefix = "!"
comment_key = "_COMMENT_"
gen_prefix = "~"
slicer_gen_dir = Path("slicer-gen")

include_dir = lambda uni: uni / Path("Include")
output_dir = lambda uni: uni / Path("Output")
steps_dir = lambda uni: uni / Path("Steps")
sys_base_file = lambda uni: uni / Path("System Bases")
usr_base_dir = lambda uni: uni / Path("User Bases")
type_filament_file = lambda uni: uni / Path("Type is Filament")
type_process_file = lambda uni: uni / Path("Type is Process")


class UniverseType(Enum):
    FILAMENT = 0
    PROCESS = 1


class Base:
    def __init__(self, sys_file, usr_file=None):
        assert isinstance(sys_file, Path)
        assert isinstance(usr_file, Path) or usr_file is None
        self.sys_file = sys_file
        self.usr_file = usr_file
        self.include_dir = sys_file.parent

    def __repr__(self):
        return f"Base(sys={self.sys_file}, usr={self.usr_file})"

    def base_name(self):
        return self.usr_data.get("name") or self.usr_data["inherits"]

    @cached_property
    def usr_data(self):
        default = {
            "inherits": self.sys_data["name"],
            "from": "User",
            "is_custom_defined": "0",  # NOTE: Not sure what this means, but user created presets has this
            "version": "1.10.0.0",  # TODO: get the current version somehow? Or why does this matter?
        }

        if self.usr_file is not None:
            usr = read_json(self.usr_file)
            assert "name" in usr
            assert usr.get("inherits") == default["inherits"]
            default |= usr

        return default

    @cached_property
    def sys_data(self):
        def flatten(path):
            cont = read_json(path)
            inherits = cont.get("inherits")
            if inherits is not None:
                parent = self.include_dir / (inherits + ".json")
                if not parent.is_file():
                    raise FileNotFoundError(f"parent of {path} doesn't exist: {parent}")
                cont = flatten(parent) | cont
            return cont

        return read_only_dict(flatten(self.sys_file))


class SlicerGenException(Exception):
    pass


@cache
def read_json(path):
    with path.open("rb") as f:
        if ".json" in [path.name, path.suffix]:
            data = json.load(f)
            data.pop(comment_key, None)
        elif ".toml" in [path.name, path.suffix]:
            data = tomllib.load(f, parse_float=str)
        else:
            raise SlicerGenException(f"Unsupported file: {path}")
        return read_only_dict(data)


def config_name(base, *crumbs):
    basename = base.base_name()
    basename = re.sub(r" @\w+ \w+", "", basename, count=1)
    middle = " ".join(
        [basename] + [c.stem for c in crumbs if not c.name.startswith(".")]
    )
    return f"{gen_prefix}{middle}"


def eval_value(effective, cur_key, value, cur_index=None):
    # pylint: disable=unused-variable
    def parent(*, default=None, key=None, index=cur_index):
        key = key or cur_key

        if (val := effective.get(key)) is not None:
            if isinstance(val, list) and index is not None:
                return val[index]
            return val

        if default is None:
            raise SlicerGenException(f"no value for parent with key '{key}'")
        return default

    # pylint: disable=unused-variable
    def cap(num):
        return min(Decimal(num), Decimal(parent(default=num)))

    # pylint: disable=unused-variable
    def atleast(num):
        return max(Decimal(num), Decimal(parent(default=num)))

    # pylint: disable=unused-variable
    def dec(num):
        return Decimal(num)

    # pylint: disable=unused-variable
    def nonzero(x):
        return x if parent(default="not 0") != "0" else "0"

    if value.startswith(expr_prefix):
        value = value.removeprefix(expr_prefix)
        # pylint: disable=eval-used
        value = eval(value)
        value = str(value)

    if cur_key == "description" or cur_key == "filament_notes":
        value = "\n\n".join(s for s in [effective.get(cur_key), value] if s)

    return value


def eval_step(effective, new):
    evaluated = {}
    for k, v in new.items():
        if isinstance(v, str):
            v = eval_value(effective, k, v)
        elif isinstance(v, list):
            v = [eval_value(effective, k, x, cur_index=i) for i, x in enumerate(v)]
        else:
            raise SlicerGenException(f"Unsupported value found in config: {k}={v}")
        evaluated[k] = v
    return evaluated


def merge(unitype, base, *crumbs):
    config = base.usr_data.copy()
    effective = base.sys_data | config
    for step in crumbs:
        evaluated = eval_step(effective, read_json(step))
        effective |= evaluated
        config |= evaluated

    name = config_name(base, *crumbs)
    config["name"] = name

    match unitype:
        case UniverseType.PROCESS:
            config["print_settings_id"] = name
        case UniverseType.FILAMENT:
            config["filament_settings_id"] = name
        case _:
            raise AssertionError(f"missed unitype case {unitype}")

    return config


def read_uni_type(universe):
    if type_process_file(universe).is_file():
        return UniverseType.PROCESS
    if type_filament_file(universe).is_file():
        return UniverseType.FILAMENT
    return None


def read_bases(universe):
    bases = []

    if sys_base_file(universe).is_file():
        with sys_base_file(universe).open() as f:
            bases += [
                Base(filename)
                for line in f
                for glob in line.splitlines()
                for filename in include_dir(universe).glob(glob)
                if glob
            ]

    if usr_base_dir(universe).is_dir():
        for usr in usr_base_dir(universe).iterdir():
            parent = read_json(usr)["inherits"] + ".json"
            bases.append(Base(include_dir(universe) / parent, usr))

    return bases


def delete_generated(universe):
    for f in output_dir(universe).iterdir():
        if f.name.startswith(gen_prefix) and f.suffix in [".json", ".info"]:
            print(f"Removing {f}")
            f.unlink()


def write_generated(universe, merged):
    for data in merged:
        name = data["name"]
        fullname = output_dir(universe) / (name + ".json")
        with fullname.open(mode="w") as f:
            print(f"Writing {fullname}")
            json.dump(data, f, sort_keys=True, indent=4)


def generate(universe):
    print(f"Processing {universe}")

    unitype = read_uni_type(universe)
    if unitype is None:
        raise SlicerGenException("No universe type found")

    bases = read_bases(universe)
    steps = sorted(steps_dir(universe).iterdir())
    substeps = [bases] + [sorted(s.iterdir()) for s in steps]

    basecrumbs = list(itertools.product(*substeps))
    merged = [merge(unitype, *c) for c in basecrumbs]

    write_generated(universe, merged)


def main():
    if not slicer_gen_dir.is_dir():
        print("Could not find the expected directories here", file=sys.stderr)
        sys.exit(1)

    universes = list(slicer_gen_dir.iterdir())

    for universe in universes:
        delete_generated(universe)

    for universe in universes:
        generate(universe)


if __name__ == "__main__":
    main()
