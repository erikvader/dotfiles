#!/bin/bash

set -e

# mp4 (I think) has some special data streams sometimes, that can't be copied.
nodata=
flip=
resolution=720
crf=18
vcodec=libx265

while getopts 'nfr:c:v:' arg; do
    case "$arg" in
        n) nodata=t ;;
        f) flip=t ;;
        r) resolution=$OPTARG ;;
        c) crf=$OPTARG ;;
        v) vcodec=$OPTARG ;;
        *) exit 1 ;;
    esac
done
shift $(( OPTIND - 1 ))

if [[ $# -ne 1 ]]; then
    echo Exactly one filename is required >&2
    exit 1
fi

inputfile=$1

echo Flags used:
echo '  'nodata="$nodata"
echo '  'flip="$flip"
echo '  'resolution="$resolution"
echo '  'crf="$crf"
echo '  'vcodec="$vcodec"
echo '  'inputfile="$inputfile"
echo

basename=$(basename -- "$inputfile")
dirname=$(dirname -- "$inputfile")
ext=${basename##*.}
name=${basename%.*}
outputname=${dirname}/${name}_resized.${ext}

# TODO: can't flip and change resolution at the same time
(set -x
ffmpeg -i "$inputfile" \
       -c copy \
       -map 0 \
       ${nodata:+ -map -0:d} \
       ${vcodec:+ -c:v "$vcodec"} \
       ${crf:+ -x265-params crf="$crf"} \
       -preset veryfast \
       ${resolution:+ -filter:v scale=-2:"$resolution"} \
       ${flip:+ -vf hflip} \
       "$outputname"
)

old_size=$(stat -L --format=%s "$inputfile")
new_size=$(stat -L --format=%s "$outputname")

echo The file is "0$(bc <<< "scale=2; $new_size / $old_size")" of its original size

mv -f "$outputname" "$inputfile"

# Measurement results
# 4K -> 1080p
# 4.12G
#
# the best
# h265-crf18-veryfast-35min.mp4 1.24G
# h264-crf18-veryfast-18min.mp4 2G
# h264-crf18-fast-32min.mp4 2.33G
#
# bad
# h265-crf18-ultrafast-19min.mp4 910M
#
# really bad
# h265-crf23-ultrafast-17min.mp4 492M
# h265-crf28-ultrafast-16min.mp4 295M

