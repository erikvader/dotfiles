#!/bin/bash

# TODO: flag to use something else than h265 eg for wmv
# TODO: flag to also re-encode audio stream

set -e

nodata=
# mp4 (I think) has some special data streams sometimes, that can't be copied.
if [[ $1 = --no-data ]]; then
    nodata=t
    shift
fi

if [[ $# -lt 1 ]]; then
    echo invalid usage >&2
    exit 1
fi

arg_filename=$1
arg_resolution=${2:-720}
arg_crf=$3

if [[ -z $arg_crf ]]; then
    case $arg_resolution in
        1080) arg_crf=18 ;;
        *) arg_crf=23 ;;
    esac
fi

basename=$(basename -- "$arg_filename")
dirname=$(dirname -- "$arg_filename")
ext=${basename##*.}
name=${basename%.*}
outputname=${dirname}/${name}_resized.${ext}

ffmpeg -i "$arg_filename" \
       -c copy \
       -map 0 \
       ${nodata:+ -map -0:d} \
       -c:v libx265 \
       -x265-params crf="$arg_crf" \
       -preset veryfast \
       -filter:v scale=-2:"$arg_resolution" \
       "$outputname"

old_size=$(stat --format=%s "$arg_filename")
new_size=$(stat --format=%s "$outputname")

echo The file is "0$(bc <<< "scale=2; $new_size / $old_size")" of its original size

mv -f "$outputname" "$arg_filename"

# Measurement results
# 4K -> 1080p
# 4.12G
#
# the best
# h265-crf18-veryfast-35min.mp4 1.24G
# h264-crf18-veryfast-18min.mp4 2G
# h264-crf18-fast-32min.mp4 2.33G
#
# bad
# h265-crf18-ultrafast-19min.mp4 910M
#
# really bad
# h265-crf23-ultrafast-17min.mp4 492M
# h265-crf28-ultrafast-16min.mp4 295M
