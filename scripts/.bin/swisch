#!/bin/python

import sys
from datetime import timedelta
import time
import networkx as nx


def build_bipartite(sinks, sources):
    """
    Take sinks and sources and build a bipartite flow network.
    All sources are connected to a common source, all sinks are
    connected to a common sink and all sources are connected to all
    other sinks.
    """
    G = nx.DiGraph()
    G.add_node("_source")
    G.add_node("_sink")
    for s, v in sources:
        G.add_edge("_source", s, capacity=v)
    for s, v in sinks:
        G.add_edge(s, "_sink", capacity=v)

    for s, v in sources:
        for ss, _ in sinks:
            G.add_edge(s, ss, capacity=v)

    return G


def approx_payments(sinks, sources):
    target = sum(v for _, v in sources)
    bip = build_bipartite(sinks, sources)
    fv, fd = nx.algorithms.flow.maximum_flow(bip, "_source", "_sink")
    if fv < target:
        return None
    return [
        (src, amo, sin) for src, _ in sources for sin, amo in fd[src].items() if amo > 0
    ]


def ckr_tostring(ckr):
    s = str(ckr)
    if len(s) == 1:
        return "0.0" + s
    if len(s) == 2:
        return "0." + s
    return s[:-2] + "." + s[-2:]


def kr_to_ckr(kr):
    if not kr:
        return None
    parts = kr.split(".")
    if len(parts) > 2:
        return None

    if not all(p.isdigit() for p in parts):
        return None

    if len(parts) == 2 and len(parts[1]) > 2:
        return None

    return sum(int(p) * s for p, s in zip(parts, [100, 1]))


def read_input():
    """
    > from amount[.ören] to
    from shall pay amount to to

    > all amount[.ören] to
    all splits amount evenly among everyone, including to
    """
    trans = []
    for line in sys.stdin:
        words = line.split()
        if len(words) == 3:
            ckr = kr_to_ckr(words[1])
            if ckr is None:
                raise Exception("middle value must be an integer")

            if words[0] == words[2]:
                raise Exception("self loops are not allowed")

            if words[2] == "all":
                raise Exception("'all' not allowed here")

            trans.append((None if words[0] == "all" else words[0], ckr, words[2]))
        else:
            raise Exception("invalid format on line typ")

    return trans


def expand_trans(trans, everyone):
    expanded = []
    for f, ckr, t in trans:
        if f is not None:
            expanded.append((f, ckr, t))
        else:
            even = ckr // len(everyone)
            leftover = ckr % len(everyone)
            for e in everyone:
                am = even
                if leftover > 0:
                    even += 1
                    leftover -= 1
                if e != t:
                    expanded.append((e, am, t))
    return expanded


def everyone_involved(trans):
    ey = set()
    for f, _, t in trans:
        if f is not None:
            ey.add(f)
        ey.add(t)
    return ey


def sinks_n_sources(trans, everyone):
    sns = {e: 0 for e in everyone}
    for f, ckr, t in trans:
        sns[t] -= ckr
        sns[f] += ckr

    return (
        [(e, -ckr) for e, ckr in sns.items() if ckr < 0],
        [(e, ckr) for e, ckr in sns.items() if ckr > 0],
    )


def find_payments(sinks, sources, timeout=None, lns=False):
    from minizinc import Instance, Model, Solver

    solver = Solver.lookup("gecode" if lns else "chuffed")
    model = Model()
    model.add_string(
        """
        include "globals.mzn";

        int: S;
        int: T;
        array[1..S] of int: sources;
        array[1..T] of int: sinks;

        constraint assert(forall(i in 1..S)(sources[i] > 0), "sources must be positive");
        constraint assert(forall(i in 1..T)(sinks[i] > 0), "sinks must be positive");
        constraint assert(sum(sources) = sum(sinks), "must have equal money in as out");

        int: num_arcs = S*T;
        array[1..num_arcs, 1..2] of int: arc = array2d(
            1..num_arcs,
            1..2,
            [if x = 1 then s else t endif | s in 1..S, t in S+1..S+T, x in 1..2]
        );
        array[1..S+T] of int: balance = sources ++ [-sinks[i] | i in 1..T];
        int: max_capacity = max(sources ++ sinks);

        array[1..num_arcs] of var 0..max_capacity: flow;
        constraint network_flow(arc, balance, flow);

        constraint implied_constraint(sum(flow) = sum(sources));
        """
    )
    if lns:
        model.add_string(
            """
            include "gecode.mzn";
            solve
            :: restart_constant(3000)
            :: relax_and_reconstruct(flow, 95)
            maximize count(flow, 0);
            """
        )
    else:
        model.add_string("solve maximize count(flow, 0);")

    instance = Instance(solver, model)
    instance["S"] = len(sources)
    instance["T"] = len(sinks)
    instance["sources"] = [ckr for _, ckr in sources]
    instance["sinks"] = [ckr for _, ckr in sinks]

    now = time.perf_counter()
    result = instance.solve(
        timeout=None if timeout is None else timedelta(seconds=timeout)
    )
    solvetime = time.perf_counter() - now
    print("MiniZinc took {:f} seconds".format(solvetime))

    if len(result) != 1:
        return None
    flow = result["flow"]

    pays = []
    i = 0
    for s, _ in sources:
        for si, _ in sinks:
            if flow[i] > 0:
                pays.append((s, flow[i], si))
            i += 1
    return pays


def random_transactions(
    people=10, transactions=100, amount_low=1, amount_high=1000, seed=None
):
    import random

    random.seed(seed)
    pop = [str(p + 1) for p in range(people)]
    for _ in range(transactions):
        t, f = random.sample(pop, 2)
        amount = random.randint(amount_low, amount_high)
        yield f, amount, t


def main():
    # NOTE: Max-flow seems to always be as good as MiniZinc, Sadge
    trans = read_input()
    # trans = list(random_transactions(seed="hej", people=10, transactions=10000))
    everyone = everyone_involved(trans)
    trans = expand_trans(trans, everyone)

    sinks, sources = sinks_n_sources(trans, everyone)
    pays_opt = find_payments(sinks, sources)
    pays_approx = approx_payments(sinks, sources)

    opt_apr = len(pays_approx)
    opt_len = len(pays_opt) if pays_opt is not None else None

    if opt_len is None:
        print("MiniZinc found nothing")
        pays = pays_approx
    elif opt_len > opt_apr:
        print("MiniZinc got {}, approx is better".format(opt_len))
        pays = pays_approx
    elif opt_len == opt_apr:
        print("approx is just as good")
        pays = pays_opt
    else:
        print("approx got {}, MiniZinc is better".format(opt_apr))
        pays = pays_opt

    print("{} transactions got reduced to {}".format(len(trans), len(pays)))
    for f, ckr, t in sorted(pays, key=lambda x: (x[0], x[2])):
        print("{} pays {} to {}".format(f, ckr_tostring(ckr), t))


if __name__ == "__main__":
    main()
