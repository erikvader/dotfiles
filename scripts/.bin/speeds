#!/bin/python

import psutil as P
import math
from time import sleep
from tabulate import tabulate, RIGHT, LEFT
from itertools import zip_longest
import argparse
import re

DELAY = 1
GRAPH_WIDTH = 20
GRAPH_HEIGHT = 16
GRAPH_THRES = 10**6
INTERVALS = [1, 5, 10]
HISTLEN = max(INTERVALS[-1], GRAPH_WIDTH)

# clears the whole screen and prepares to restore the content of the
# terminal when this program exits.
def clear_screen():
   print('\x1b[?1049h\x1b[2J\x1b[H',end='')

# data is a list of numbers to be graphed.
# minimum_upper is the minimum number needed to fill a while column,
#               this sets some kind of beginning scale.
# width and height are the number of columns and rows to be used.
# The first element in data is the left-most column of the graph. If
# there arent enough elements in data, then the graph will be aligned
# to the right. If there are too many elements in data, then only
# enough items from the beginning are used.
def graph(data, minimum_upper, width, height):
   CHARS = ["", "▁", "▂", "▃", "▄", "▅", "▆", "▇", "█"]
   ceiling = max(data + [minimum_upper])

   bars = data.copy()
   if len(bars) > width:
      bars = bars[:width]
   elif len(bars) < width:
      bars[:0] = [0]*(width - len(bars))

   def gen_bar(d):
      perc = d/ceiling
      bar = CHARS[-1]*(math.floor(perc*height)) + CHARS[int(round((((perc*height) % 1) * 100)) / 12.5)]
      bar += " "*(height - len(bar))
      return bar

   bars = [gen_bar(x) for x in bars]
   bars = ["".join(t) for t in zip(*bars)][::-1]
   return bars

# print b in a nice compact ISO format
def print_bytes(b):
   prefixes = ["B", "KB", "MB", "GB", "TB"]
   if b == 0:
      mag = 0
      num = 0
   else:
      mag = math.floor(math.log(b, 1000))
      num = round((b/1000**mag)*10)/10
   return "{}{}/s".format(num, prefixes[mag])

# prints stats of all items in history
def print_stats(history, header):
   name, recv_name, sent_name = header
   fields = [tuple(
      [name] +
      ["{}-{}".format(recv_name, i) for i in INTERVALS] +
      ["{}-{}".format(sent_name, i) for i in INTERVALS]
   )]
   latest = history[0]
   for iface,stats in latest.items():
      fields.append(tuple(
         [iface] +
         [print_bytes(
            (stats['recv'] - history[i][iface]['recv']) / (DELAY * i))
          for i in INTERVALS
         ] +
         [print_bytes(
            (stats['sent'] - history[i][iface]['sent']) / (DELAY * i))
            for i in INTERVALS
         ]
      ))

   print(
      tabulate(
         fields,
         end='\x1b[K\n',
         end_on_last_line=True,
         widths=(0, 8),
         align=(LEFT,RIGHT)
      ),
      end='')

# add new to listt in front while kicking out the item last. also
# renames the attributes recv and sent to 'recv' and 'sent'
# respectively.
def insert_into(listt, new, recv, sent):
   listt.pop()
   x = {}
   for k,v in new.items():
      y = {}
      y['recv'] = getattr(v, recv)
      y['sent'] = getattr(v, sent)
      x[k] = y
   listt.insert(0, x)

# returns the differences between all items in nums
def differences(nums, step):
   diffs = []
   for i in range(len(nums)):
      if i+step >= len(nums):
         break
      diffs.append((nums[i] - nums[i+step]))
   return diffs

# print out a graph
def print_graph(history, iface, recv_send, title):
   datapoints = differences([x[iface][recv_send] for x in history], 1) # TODO: divide by DELAY if step /= 1
   maximum = max(datapoints)
   rows = graph(datapoints[::-1], GRAPH_THRES, GRAPH_WIDTH, GRAPH_HEIGHT)
   legend = [
      "{} - {}".format(iface, title),
      "top: " + print_bytes(max(GRAPH_THRES, maximum)),
      "max: " + print_bytes(maximum)
   ]
   for r,l in zip_longest(rows, legend):
      print(r, end='')
      if l:
         print(l, end='')
      print('\x1b[K')

def main():
   # parse args
   parser = argparse.ArgumentParser(description='Shows interface and block device transfer rates.')
   parser.add_argument("format", nargs="*", default=["nets", "disks"], help="can be one of: nets for speeds on all network interfaces, disks for speeds of all block devices or ig:iface:[in,out] for an interface graph on interface iface with in or out traffic")
   args = parser.parse_args()

   # init histories
   nethist = [None]*(HISTLEN+1)
   for n in [P.net_io_counters(pernic=True)]*(len(nethist)):
      insert_into(nethist, n, "bytes_recv", "bytes_sent")

   diskhist = [None]*(HISTLEN+1)
   for n in [P.disk_io_counters(perdisk=True)]*(len(diskhist)):
      insert_into(diskhist, n, "read_bytes", "write_bytes")

   # parse format
   prints = []
   for f in args.format:
      m = re.match(r"ig:(.+):(in|out)", f)
      if f == "nets":
         prints.append((print_stats, nethist, ("iface", "recv", "sent")))
      elif f == "disks":
         prints.append((print_stats, diskhist, ("part", "read", "write")))
      elif m:
         prints.append((print_graph,
                        nethist,
                        m[1],
                        "recv" if m[2] == "in" else "sent",
                        "Incoming" if m[2] == "in" else "Outgoing"
         ))
      else:
         print("invalid format: '{}'".format(f))
         exit(1)

   # start loop
   clear_screen()

   while True:
      print('\x1b[H',end='') # move cursor to the beginning

      # update histories
      insert_into(nethist, P.net_io_counters(pernic=True), "bytes_recv", "bytes_sent")
      insert_into(diskhist, P.disk_io_counters(perdisk=True), "read_bytes", "write_bytes")

      for p in prints:
         p[0](*p[1:])
         print()

      print('\x1b[J', end='') # clear everything to the end of terminal

      try:
         sleep(DELAY)
      except KeyboardInterrupt:
         break

   print('\x1b[?1049l',end='') # restore previous state

if __name__ == "__main__":
   main()
