#!/bin/python

"""
depends on: colorama
"""

from colorama import Back, Fore, Style
import sys
import re

_string_to_colorama = {
   "f": {
      "r": Fore.RED,
      "b": Fore.BLACK,
      "g": Fore.GREEN,
      "y": Fore.YELLOW,
      "u": Fore.BLUE,
      "m": Fore.MAGENTA,
      "c": Fore.CYAN,
      "w": Fore.WHITE
   },
   "b": {
      "r": Back.RED,
      "b": Back.BLACK,
      "g": Back.GREEN,
      "y": Back.YELLOW,
      "u": Back.BLUE,
      "m": Back.MAGENTA,
      "c": Back.CYAN,
      "w": Back.WHITE
   },
   "l": {},
   "d": {}
}

_string_to_colorama["l"]["f"] = {k: Style.BRIGHT + v for k,v in _string_to_colorama["f"].items()}
_string_to_colorama["l"]["b"] = {k: Style.BRIGHT + v for k,v in _string_to_colorama["b"].items()}
_string_to_colorama["d"]["f"] = {k: Style.DIM + v for k,v in _string_to_colorama["f"].items()}
_string_to_colorama["d"]["b"] = {k: Style.DIM + v for k,v in _string_to_colorama["b"].items()}
_string_to_colorama["f"] = {k: Style.NORMAL + v for k,v in _string_to_colorama["f"].items()}
_string_to_colorama["b"] = {k: Style.NORMAL + v for k,v in _string_to_colorama["b"].items()}

def _get_color(s):
   cur = _string_to_colorama
   s = s.lower()
   for c in s:
      if not c in cur:
         raise Exception("color '{}' doesn't exist".format(s))
      cur = cur[c]
   return cur

def _print_colors(prefix, d):
   printed_anything = False
   for k,v in d.items():
      if isinstance(v, dict):
         _print_colors(prefix+k, v)
      else:
         c = _get_color(prefix+k)
         print(c +prefix+k + Style.RESET_ALL, end=" ")
         printed_anything = True
   if printed_anything:
      print()

def _print_help(prog_name):
   print("\n".join([
         "{0} -h",
         "{0} REGEX COLOR [REGEX COLOR] ..."
      ]).format(prog_name))

   print()
   print("Colorizes stdin")
   print()
   print("colors:")
   _print_colors("", _string_to_colorama)

def main():
   if "-h" in sys.argv:
      _print_help("ecolor")
      exit()

   colors = []
   regexp = []
   argc = len(sys.argv)
   if argc <= 1:
      raise Exception("no arguments given")
   for i in range(1, argc, 2):
      if i+1 >= argc:
         raise Exception("uneven arguments")

      regexp.append("({})".format(sys.argv[i]))
      colors.append(_get_color(sys.argv[i+1]))

   regexp = re.compile("|".join(regexp))

   while True:
      l = sys.stdin.readline()
      if not l:
         break

      lastpos = 0
      cuts = []
      while True:
         m = regexp.search(l, lastpos)
         if not m:
            cuts.append(l[lastpos:])
            break
         for i,g in enumerate(m.groups()):
            if g:
               cuts.append(l[lastpos:m.start(i+1)])
               lastpos = m.end(i+1)
               cuts.append("{}{}{}".format(colors[i], g, Style.RESET_ALL))
               break

      sys.stdout.write("".join(cuts))
      sys.stdout.flush()

if __name__ == "__main__":
   try:
      main()
   except KeyboardInterrupt:
      pass
   except Exception as e:
      print("error: " + str(e), file=sys.stderr)
      exit(1)
