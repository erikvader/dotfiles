#!/bin/python

import urllib.request as U
import urllib.parse as P
import json
import re
from contextlib import contextmanager
import zipfile as Z
import os
from math import log10, ceil

class MangadexException(Exception):
   pass

class ChapterDownloader:
   def __init__(self, chap_id):
      self.chap_id = chap_id
      self.chap_json = MangadexDownloader.fetch_json(
         self.chap_id,
         "chapter"
      )
      self.cur_page = 0
      self.extractor = re.compile(r"^[a-zA-z]*([0-9]+)\.(.+)$")

   def get_title(self):
      return self.chap_json["title"]

   def amount_of_pages(self):
      return len(self.chap_json["page_array"])

   def has_next(self):
      return self.cur_page < self.amount_of_pages()

   def next_page_info(self):
      if not self.has_next():
         raise MangadexException("no next page")

      m = self.extractor.match(self.chap_json["page_array"][self.cur_page])
      return int(m[1]), m[2]

   @contextmanager
   def next_page(self):
      if not self.has_next():
         raise MangadexException("no next page")

      url = "{}/{}/{}".format(
         self.chap_json["server"].rstrip("/"),
         self.chap_json["hash"],
         self.chap_json["page_array"][self.cur_page]
      )
      with MangadexDownloader.fetch(url) as image:
         yield image

      self.cur_page += 1

class MangadexDownloader:
   HEADERS = {"User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64)"}
   API_URL = "https://mangadex.org/api"

   def __init__(self, manga_json):
      self.manga_json = manga_json
      self.chapter_info = {}
      self._extract_chapter_info()

   def get_manga_json(self):
      return json.dumps(self.manga_json)

   def get_title(self):
      return self.manga_json["manga"]["title"]

   def set_preferred_group(self, group):
      self.manga_json["settings"]["preferred_group"] = group

   def get_available_chapters(self):
      return sorted(self.chapter_info.keys(), key=float)

   def download_chapter(self, chap_num):
      if chap_num not in self.chapter_info:
         raise MangadexException("{} not an available chapter".format(chap_num))

      return ChapterDownloader(self.chapter_info[chap_num])

   def _extract_chapter_info(self):
      all_chapters = self.manga_json["chapter"]
      pref_group = self.manga_json["settings"].get("preferred_group", None)

      for chap_id,vals in all_chapters.items():
         chap_num = vals["chapter"]
         if vals["lang_code"] != "gb":
            continue

         if (chap_num not in self.chapter_info or
             (pref_group and vals["group_name"] == pref_group)):
            self.chapter_info[chap_num] = chap_id

   @classmethod
   def from_url(cls, url):
      manga_info = MangadexDownloader.fetch_json(
         MangadexDownloader._extract_manga_id(url),
         "manga"
      )
      manga_info["url"] = url
      manga_info["settings"] = {}
      return cls(manga_info)

   @classmethod
   def from_file(cls, json_file):
      with open(json_file, "r") as f:
         return cls(json.load(f))

   @staticmethod
   def _extract_manga_id(url):
      # https://mangadex.org/title/2434/grappler-baki
      m = re.match(r"^https?://mangadex.org/title/([0-9]+)/?", url)
      if not m:
         raise MangadexException("invalid url")
      return m[1]

   @staticmethod
   @contextmanager
   def fetch(url, getvars=None):
      if getvars:
         getvars = P.urlencode(getvars)
         url = MangadexDownloader.API_URL + "?" + getvars
      req = U.Request(url, headers=MangadexDownloader.HEADERS)
      with U.urlopen(req) as response:
         # TODO: kolla om 200?
         yield response

   @staticmethod
   def fetch_json(mid, mtype):
      getvars = {"id": mid, "type": mtype, "baseURL": "/api"}
      with MangadexDownloader.fetch(MangadexDownloader.API_URL, getvars=getvars) as mjson:
         return json.load(mjson)

class Manager:
   SYNCFILE = ".mangadex"

   def __init__(self, path, downloader=None):
      self.path = path
      if not os.path.isdir(self.path):
         raise MangadexException("not a valid directory")

      self.syncfile = os.path.join(path, Manager.SYNCFILE)
      if not os.path.isfile(self.syncfile):
         raise MangadexException("can't find sync file")

      self.downloader = downloader or MangadexDownloader.from_file(self.syncfile)
      self.stats = []

   @classmethod
   def new(cls, basedir, url):
      md = MangadexDownloader.from_url(url)
      folder_name = md.get_title()
      folder_name = "".join([c for c in folder_name if c.isalnum() or c == ' ']).strip()
      manga_dir = os.path.join(basedir, folder_name)
      os.mkdir(manga_dir)
      with open(os.path.join(manga_dir, Manager.SYNCFILE), "w") as f:
         f.write(md.get_manga_json())
      return cls(manga_dir, downloader=md)

   def _load_status(self):
      if self.stats:
         return self.stats
      stats = []
      x = re.compile(r"^(\*?)(.+?) (.+)$")
      for f in os.scandir(self.path):
         if f.name == Manager.SYNCFILE:
            continue
         m = x.match(f.name)
         # unread, chapter, title
         stats.append((m[1] == "*", m[2], m[3]))
      self.stats = stats
      return stats

   def find_latest_downloaded_chapter(self):
      self._load_status()
      return max((c for (u,c,_) in self.stats if u), key=float) if self.stats else None

   def download_chapter(self, chap_num):
      cd = self.downloader.download_chapter(chap_num)
      filename = "*{} {}.cbz".format(chap_num, cd.get_title())
      filepath = os.path.join(self.path, filename)
      if (os.path.exists(filepath) or
          os.path.exists(os.path.join(self.path, filename.lstrip("*")))):
         raise MangadexException("chapter {} is already downloaded".format(chap_num))
      padlen = ceil(log10(cd.amount_of_pages()))
      with Z.ZipFile(filepath, "w") as zf:
         while cd.has_next():
            i, ext = cd.next_page_info()
            pagename = ("{:0"+str(padlen)+"d}.{}").format(i, ext)
            with cd.next_page() as image:
               zf.writestr(pagename, image.read())

def main():
   # m = Manager.new(".", "https://mangadex.org/title/2434/grappler-baki")
   m = Manager("Grappler Baki")
   m.download_chapter("2")
   print(m.find_latest_downloaded_chapter())
   # print(m.downloader.get_available_chapters())
   # md = MangadexDownloader.from_url("https://mangadex.org/title/2434/grappler-baki")

if __name__ == "__main__":
   main()
