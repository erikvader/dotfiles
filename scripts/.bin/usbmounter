#!/bin/python

import subprocess as S
import json
import sys
from fzf_dmenu import fzf_dmenu
from notify_send import notify_send

def get_drives():
   res = S.run(["lsblk", "-JO"], stdout=S.PIPE, check=True)
   lsblk = json.loads(res.stdout)
   usb_drives = [x for x in lsblk["blockdevices"] if x["tran"] == "usb"]
   return usb_drives

def get_partitions(drives, mounted=False):
   parts = []
   for d in drives:
      p = [p for p in [d] + d.get("children", []) if p["fstype"] is not None and mounted == bool(p["mountpoint"])]
      for x in p:
         x["vendor"] = d["vendor"]
         x["model"] = d["model"]
      parts.extend(p)
   return parts

def get_removable_drives(drives):
   return [d for d in drives if not get_partitions([d], mounted=True)]

def run_udisks(choices, cmd):
   if not choices:
      notify_send("There were no relevant drives")
      return

   formatted_choices = ["{} {} {} {}".format(part["path"], part["label"], part["vendor"], part["model"]) for part in choices]

   c = fzf_dmenu(formatted_choices, fzf_options=["--prompt", cmd+": "])
   if not c:
      return

   cpath = c.split(" ")[0]
   res = S.run(["udisksctl", cmd, "-b", cpath], text=True, stdout=S.PIPE, stderr=S.PIPE, check=False)
   noti = res.stdout + res.stderr
   if noti:
      notify_send(noti)

def main():
   usb_drives = get_drives()
   if len(sys.argv) == 2:
      if sys.argv[1] == "mount":
         run_udisks(get_partitions(usb_drives, mounted=False), "mount")
      elif sys.argv[1] == "unmount":
         run_udisks(get_partitions(usb_drives, mounted=True), "unmount")
      elif sys.argv[1] == "poweroff":
         run_udisks(get_removable_drives(usb_drives), "power-off")
      else:
         raise Exception("invalid mode")
   else:
      raise Exception("i need a mode")


if __name__ == "__main__":
   main()


