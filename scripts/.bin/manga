#!/bin/bash

set -e

function print_help {
    local w='\x1b[1;37m'
    local r='\x1b[0m'
    echo "Usage:"
    echo -e "$w  manga [FLAGS..] init MANGA_URL"
    echo -e "$r    Creates a new directory ready to download from MANGA_URL"
    echo -e "$w  manga [FLAGS..] download [--force] CHAPTER_RANGE [!] [GROUP...]"
    echo -e "$r    Downloads chapters from CHAPTER_RANGE from an optionally specified translator group."
    echo -e "$r    The flag --force disregards the download cache and redownloads every specified"
    echo -e "$r    file that doesn't exist. CHAPTER_RANGE can be: 27 or +5 or 1- or -5 or all (or -)."
    echo -e "$r    GROUP are zero or more groups to download from, or to not download from if a single '!' is present."
    echo -e "$w  manga [FLAGS..] download-link URL"
    echo -e "$r    Download a chapter from URL"
    echo -e "$w  manga [FLAGS..] gather VOLUME"
    echo -e "$r    Collects every file of a VOLUME into a cbz-file"
    echo -e "$w  manga [FLAGS..] gather-all"
    echo -e "$r    Same as gather but for all volumes that are found in the current directory"
    echo -e "$w  manga [FLAGS..] flatten FOLDER"
    echo -e "$r    Recursively finds all files in a directory, renames them to numbers according to"
    echo -e "$r    their sort order and puts them in a cbz"
    echo -e "$w  manga [FLAGS..] progress"
    echo -e "$r    Prints the first missing chapter"
    echo -e "$w  manga [FLAGS..] list"
    echo -e "$r    Lists all available chapters and all their groups"
    echo -e "$w  manga [FLAGS..] verify [-r]"
    echo -e "$r    Checks for corrupted image files using ImageMagick. Do it recursively with -r"
    echo -e "$w  manga [FLAGS..] verify-cbz FILE [FILE..]"
    echo -e "$r    Verifies an already existing cbz-file for corrupted files"
    echo
    echo -e "Flags:"
    echo -e "$w  -f$r: don't require the presence of the .manga folder"
}

function join_by {
    local d=$1; shift;
    local f=$1; shift;
    printf %s "$f" "${@/#/$d}";
}

function filter_filename {
    tr -cd 'A-Za-z0-9 ._-'
}

function find_latest {
    find . -maxdepth 1 -mindepth 1 -type f -name '*.cbz' | gawk '
BEGIN { chap=0 }
match($0, /c([0-9]{4})/, ary) { ary[1] > chap ? chap=ary[1]+0 : 0 }
END { print chap }'
}

function gallery-dl-do {
    gallery-dl --dest ./\
               --option 'filename=v{volume:>03} c{chapter:>04}{chapter_minor} p{page:>06}.{extension}'\
               --option 'directory=[]'\
               --option lang=en\
               "$@"
}

function download_manga {
    local usearchive=t
    case $1 in
        --force|-f)
            usearchive=
            shift
            ;;
    esac

    local chap_range
    case $1 in
        +*)
            local latest
            latest=$(find_latest)
            local num=${1:1}
            chap_range=$((latest+1))-$((latest+num))
        ;;
        *) chap_range=$1 ;;
    esac
    shift

    local need_metadata=t
    local filter='lang == "en"'
    local groups=$*
    case $1 in
        '')
            need_metadata=
            ;;
        '!')
            shift
            filter="$filter and not ({\"$(join_by '", "' "$@")\"} & set(group))"
            ;;
        *)
            filter="$filter and ({\"$(join_by '", "' "$@")\"} & set(group))"
            ;;
    esac

    case "$chap_range" in
        -|all) ;;
        -*)
            filter="$filter and chapter <= ${chap_range:1}"
            ;;
        *-)
            filter="$filter and chapter >= ${chap_range:0:-1}"
            ;;
        *-*)
            filter="$filter and $(cut -d- -f 1 <<< "$chap_range") <= chapter <= $(cut -d- -f 2 <<< "$chap_range")"
            ;;
        *)
            filter="$filter and chapter == $chap_range"
            ;;
    esac

    printf "%s:\t%s\n" "$chap_range" "$groups" >> .manga/download_history

    gallery-dl-do ${usearchive:+ --download-archive .manga/downloaded.db}\
                  --input-file .manga/url\
                  --chapter-filter "$filter"\
                  ${need_metadata:+ -o metadata=true}
}

function init_manga {
    local manga_name
    manga_name=$(gallery-dl-do --dump-json "$1" | jq -r '[..|.manga?|strings]|unique[0]' | filter_filename)
    if [[ -d $manga_name ]]; then
        echo "Directory '$manga_name' already exists!"
        exit 1
    fi
    mkdir "$manga_name"
    mkdir "$manga_name/.manga"
    echo "$1" > "$manga_name/.manga/url"
    touch "$manga_name/.manga/downloaded.db"
}

function flatten {
    local i=0
    find "$1" -type f | sort |\
        while IFS='' read -r line; do
            : $((i++))
            fname=$(printf '%06d' "$i").${line##*.}
            mv "$line" "$1/$fname"
            echo "$line" '->' "$fname" >> "$1/log.txt"
        done

    zip -rm0jT "$1.cbz" "$1"
    rm -r "$1"
}

function gather {
    local manga_name
    manga_name=$(basename "$PWD" | filter_filename)
    find . -mindepth 1 -maxdepth 1 -type f -regex '\./v0*'"$1"' .*' |\
        zip --names-stdin -0 --move --test "$manga_name v$1.cbz"
}

function gather-all {
    local volumes
    readarray -t volumes < \
              <(find . -mindepth 1 -maxdepth 1 -type f -printf '%P\n' | \
                    sed -nE 's/^v0*([0-9]+) .*$/\1/p' | \
                    sort -nu)

    for i in "${volumes[@]}"; do
        gather "$i"
    done
}

function progress {
    # TODO: check for half chapters somehow
    local i=1
    local asd
    while asd=$(find . -mindepth 1 -maxdepth 1 -type f -regex '\./v.*c0*'"$i"' .*'); do
        if [[ -z $asd ]]; then
            echo couldnt find chapter "$i"
            break
        fi
        : $((i++))
    done
}

function verify {
    local max=
    local total
    local i=1

    if [[ -z $1 ]]; then
        max='-maxdepth 1'
    fi

    total=$(find . $max -mindepth 1 -type f \! -iname '*.cbz' | wc -l)
    while IFS='' read -r line || [[ -n "$line" ]]; do
        echo -en "\\r\\x1b[K[$i/$total]"
        if ! convert "$line" null: &>/dev/null ; then
            echo -en "\\r\\x1b[K$line"
            if ! identify -verbose "$line" &>/dev/null; then
                echo -n ', identify also triggered'
            fi
            echo
        fi
        : $((i++))
    done < <(find . $max -mindepth 1 -type f \! -iname '*.cbz')
    echo -e "\\r\\x1b[K[$total/$total]"
}

function verify_cbz {
    temp=$(mktemp -d --tmpdir 'manga-verifier.XXXXXXXXXX')
    trap '(umount "$temp" 2>/dev/null || true); rm -d "$temp"' EXIT
    for cbz in "$@"; do
        echo "$cbz"
        archivemount -o readonly "$cbz" "$temp"
        (cd "$temp" && verify)
        umount "$temp"
    done
}

function list_chapters {
    gallery-dl-do -o metadata=true --dump-json "$(cat .manga/url)" | jq -r \
        'map(
           .[2]
           | select(.lang == "en")
           | {chapter: ((.chapter | tostring) + .chapter_minor | tonumber), group: (.group | sort | join("; "))}
         )
         | group_by(.chapter)
         | map((.[0].chapter | tostring) + ": " + (map(.group) | sort | join(", ")))
         | .[]' | tee .manga/chapters
}

foldercheck=t
if [[ $1 = -f ]]; then
    foldercheck=
    shift
fi

function ensure_manga_folder {
    if [[ -n $1 && -z $foldercheck ]]; then
        echo "this command really really needs to be inside a manga directory" >&2
        exit 1
    fi
    if [[ -n $foldercheck && ! -d .manga ]]; then
        echo "not inside a manga directory" >&2
        exit 1
    fi
}

function ensure_argument {
    if [[ -z $1 ]]; then
        echo "missing required argument $2" >&2
        exit 1
    fi
}

case $1 in
    init)
        ensure_argument "$2" MANGA_URL
        init_manga "$2"
        ;;
    download)
        ensure_manga_folder t
        ensure_argument "$2" CHAPTER_RANGE
        download_manga "${@:2}"
        ;;
    gather)
        ensure_manga_folder
        ensure_argument "$2" VOLUME
        gather "$2"
        ;;
    gather-all)
        ensure_manga_folder
        gather-all
        ;;
    flatten)
        ensure_argument "$2" FOLDER
        flatten "$2"
        ;;
    progress)
        ensure_manga_folder
        progress
        ;;
    list)
        ensure_manga_folder t
        list_chapters
        ;;
    verify)
        ensure_manga_folder
        verify "$2"
        ;;
    verify-cbz)
        ensure_argument "$2" FILE
        verify_cbz "${@:2}"
        ;;
    download-link)
        ensure_argument "$1" LINK
        gallery-dl-do "$1"
        ;;
    -h|--help)
        print_help
        exit 1
        ;;
    *)
        echo "invalid usage, see the --help flag"
        exit 1
        ;;
esac

