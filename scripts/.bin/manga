#!/bin/bash

set -e

function print_help {
    echo "Usage:"
    echo "  manga init manga_url"
    echo "  manga download [--force] chapter_range [group]"
    echo "  manga gather volume"
    echo "  manga gather-all"
    echo "  manga flatten folder"
    echo "  manga progress"
    echo "  manga list"
    echo "  manga verify"
    echo
    echo "Where chapter_range can be: 1,2,5-7 or +5"
}

function filter_filename {
    tr -cd 'A-Za-z0-9 ._-'
}

function find_latest {
    find . -maxdepth 1 -mindepth 1 -type f -name '*.cbz' | gawk '
BEGIN { chap=0 }
match($0, /c([0-9]{4})/, ary) { ary[1] > chap ? chap=ary[1]+0 : 0 }
END { print chap }'
}

function download_manga {
    local usearchive=t
    case $1 in
        --force|-f)
            usearchive=
            shift
            ;;
    esac

    local chap_range
    case $1 in
        +*)
            local latest
            latest=$(find_latest)
            local num=${1:1}
            chap_range=$((latest+1))-$((latest+num))
        ;;
        *) chap_range=$1 ;;
    esac

    local group=''
    case $2 in
        '') ;;
        *)
            group="and group == \"$2\""
            ;;
    esac

    gallery-dl ${usearchive:+ --download-archive .manga/downloaded.db}\
               --input-file .manga/url\
               --chapter-range "$chap_range"\
               --dest ./\
               --chapter-filter 'lang == "en"'" $group"\
               --option 'filename=v{volume:>03} c{chapter:>04}{chapter_minor} p{page:>06}.{extension}'\
               --option 'directory=[]'
}

function init_manga {
    local manga_name
    manga_name=$(gallery-dl --dump-json "$1" | jq -r '[..|.manga?|strings]|unique[0]' | filter_filename)
    if [[ -d $manga_name ]]; then
        echo "Directory '$manga_name' already exists!"
        exit 1
    fi
    mkdir "$manga_name"
    mkdir "$manga_name/.manga"
    echo "$1" > "$manga_name/.manga/url"
    touch "$manga_name/.manga/downloaded.db"
}

function flatten {
    local i=0
    find "$1" -type f | sort |\
        while read -r line; do
            : $((i++))
            fname=$(printf '%06d' "$i").${line##*.}
            mv "$line" "$1/$fname"
            echo "$line" '->' "$fname" >> "$1/log.txt"
        done

    zip -rm0j "$1.cbz" "$1"
    rm -r "$1"
}

function gather {
    local manga_name
    manga_name=$(basename "$PWD" | filter_filename)
    find . -mindepth 1 -maxdepth 1 -type f -regex '\./v0*'"$1"' .*' |\
        zip --names-stdin -0 --move "$manga_name v$1.cbz"
}

function gather-all {
    local volumes
    readarray -t volumes < \
              <(find . -mindepth 1 -maxdepth 1 -type f -printf '%P\n' | \
                    sed -nE 's/^v0*([0-9]+) .*$/\1/p' | \
                    sort -nu)

    for i in "${volumes[@]}"; do
        gather "$i"
    done
}

function progress {
    # TODO: check for half chapters somehow
    local i=1
    local asd
    while asd=$(find . -mindepth 1 -maxdepth 1 -type f -regex '\./v.*c0*'"$i"' .*'); do
        if [[ -z $asd ]]; then
            echo couldnt find chapter "$i"
            break
        fi
        : $((i++))
    done
}

function verify {
    local total
    local i=1
    total=$(find . -maxdepth 1 -mindepth 1 -type f \! -iname '*.cbz' | wc -l)
    while IFS='' read -r line || [[ -n "$line" ]]; do
        echo -en "\\r\\x1b[K[$i/$total]"
        if ! convert "$line" null: &>/dev/null ; then
            echo -en "\\r\\x1b[K$line"
            if ! identify -verbose "$line" &>/dev/null; then
                echo -n ', identify also triggered'
            fi
            echo
        fi
        : $((i++))
    done < <(find . -maxdepth 1 -mindepth 1 -type f \! -iname '*.cbz')
}

function list_chapters {
    gallery-dl --dump-json "$(cat .manga/url)" | jq -r \
        'map(
           .[2]
           | select(.lang == "en")
           | {chapter: ((.chapter | tostring) + .chapter_minor | tonumber), group: .group}
         )
         | group_by(.chapter)
         | map((.[0].chapter | tostring) + ": " + (map(.group) | join(", ")))
         | .[]'
}

case $1 in
    init)
        if [[ $2 ]]; then
            init_manga "$2"
        else
            echo "missing required argument manga_url"
            exit 1
        fi
        ;;
    download)
        if [[ $2 && -d .manga ]]; then
            download_manga "${@:2}"
        else
            echo "missing required argument chapter_range or not inside a manga directory"
            exit 1
        fi
        ;;
    gather)
        if [[ $2 && -d .manga ]]; then
            gather "$2"
        else
            echo "missing required argument volume or not inside a manga directory"
            exit 1
        fi
        ;;
    gather-all)
        if [[ -d .manga ]]; then
            gather-all
        else
            echo "not inside a manga directory"
            exit 1
        fi
        ;;
    flatten)
        if [[ $2 ]]; then
            flatten "$2"
        else
            echo "expected required argument folder"
            exit 1
        fi
        ;;
    progress)
        if [[ -d .manga ]]; then
            progress
        else
            echo "not in manga folder"
            exit 1
        fi
        ;;
    list)
        if [[ -d .manga ]]; then
            list_chapters
        else
            echo "not in manga folder"
            exit 1
        fi
        ;;
    verify)
        if [[ -d .manga ]]; then
            verify
        else
            echo "not in manga folder"
            exit 1
        fi
        ;;
    -h|--help)
        print_help
        exit 1
        ;;
    *)
        echo "invalid usage, see the --help flag"
        exit 1
        ;;
esac

