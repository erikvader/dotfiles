#!/bin/python

from lark import Lark, Transformer, UnexpectedInput
from datetime import datetime, timedelta, date, time
import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import os

class Parser:
   def __init__(self):
      self.parser = Parser._parser()

   def parse(self, inp):
      ast = self.parser.parse(inp)
      json = Parser.TreeToJson().transform(ast)
      # print(ast.pretty())
      return json
      # from pprint import pprint
      # pprint(json)

   class TreeToJson(Transformer):
      @staticmethod
      def _merge(*dicts):
         res = {}
         for d in dicts:
            res.update(d)
         return res

      def command(self, a):
         t, r, *rest = a
         conc = {"title": t, "time": r}
         conc.update(self._merge(*rest))
         return conc

      def range_for(self, a):
         start = a[0]
         end = start + a[1]
         return {"start": start, "end": end}

      def range_to(self, a):
         return {"start": a[0], "end": a[1]}

      def datetime(self, a):
         n = datetime.today()
         d = n.date()
         t = n.time()
         for x in a:
            if isinstance(x, date):
               d = x
            elif isinstance(x, time):
               t = x
         return datetime.combine(d, t)

      def date(self, a):
         d = a[0]
         if isinstance(d, timedelta):
            d = date.today() + d
         return d

      def time(self, a):
         t = a[0]
         if isinstance(t, timedelta):
            t = time.today() + t
         return t

      def relative_datetime(self, a):
         return sum(a, timedelta())

      def relative_date(self, a):
         if len(a) == 1 and a[0].type == "NEXT_DAY":
            start = date.today().weekday()
            goal = ["mån", "tis", "ons", "tor", "fre", "lör", "sön"].index(str(a[0]))
            return timedelta(days=goal-start if goal > start else 7-(start-goal))

         days = 0
         i = iter(a)
         for l, n in zip(i, i):
            if n == "d":
               days += int(l)
            elif n == "w":
               days += 7 * int(l)
            else:
               raise NotImplementedError("m and y are unambigous, do i even want these?")

         return timedelta(days=days)

      def absolute_date(self, a):
         n = date.today()
         return n.replace(**self._merge(*a))

      def month(self, a):
         if a[0].type == "INT":
            m = int(a[0])
         else:
            m = ["jan", "feb", "mar", "apr", "jun", "jul",
                 "aug", "sep", "okt", "nov", "dec"].index(str(a[0])) + 1
         return {"month": m}

      def today(self, _):
         return {}

      def day(self, a):
         return {"day": int(a[0])}

      def year(self, a):
         if len(a[0]) == 2:
            y = "20{}".format(a[0])
         else:
            y = a[0]
         return {"year": int(y)}

      def relative_time(self, a):
         return timedelta(hours=int(a[0]), minutes=int(a[1]))

      def absolute_time(self, a):
         return time(hour=int(a[0]), minute=int(a[1]))

      def description(self, a):
         return {"description": a[0]}

      def place(self, a):
         return {"place": a[0]}

      def heldag(self, _):
         return {"heldag": True}

      def reminder(self, a):
         return {"reminder": int(a[0].total_seconds()) // 60}

      def string(self, a):
         return a[0][1:-1]

   @staticmethod
   def _parser():
      return Lark(
         r"""
         command: "add" string range (heldag | place | description | reminder)*

         range: datetime "to" datetime           -> range_to
              | datetime "for" relative_datetime -> range_for

         reminder: "reminder" relative_datetime
         description: ("description" | "desc") string
         place: "at" string
         heldag: "heldag"

         relative_datetime: relative_date relative_time
                          | relative_date
                          | relative_time

         datetime: date time
                 | date
                 | time

         date: relative_date | absolute_date
         absolute_date: year "-" month "-" day
                      | day "/" month ("-" year)?
                      | "today"                   -> today
         relative_date: (INT RELATIVE_DATE_LETTER)+
                      | NEXT_DAY

         RELATIVE_DATE_LETTER: "d" | "m" | "y" | "w"
         year: INT
         month: INT | MONTH_NAME
         day: INT
         NEXT_DAY: "mån" | "tis" | "ons" | "tor" | "fre" | "lör" | "sön"
         MONTH_NAME: "jan" | "feb" | "mar" | "apr" | "jun" | "jul" | "aug" | "sep" | "okt" | "nov" | "dec"

         time: relative_time | absolute_time
         relative_time: "~" DOUBLE_DIGIT ":" DOUBLE_DIGIT
         absolute_time: DOUBLE_DIGIT ":" DOUBLE_DIGIT

         string: ESCAPED_STRING
         DOUBLE_DIGIT: DIGIT~2

         %import common.WORD
         %import common.INT
         %import common.DIGIT
         %import common.ESCAPED_STRING
         %import common.WS
         %ignore WS
         """, start="command")

class Google():
   def __init__(self):
      self.token_path = os.path.expanduser("~/.googlecal/token")
      self.cred_path = os.path.expanduser("~/.googlecal/credentials.json")
      self.service = self._get_google_calendar_service()

   def _get_google_calendar_service(self):
      creds = None
      # The file token.pickle stores the user's access and refresh tokens, and is
      # created automatically when the authorization flow completes for the first
      # time.
      if os.path.exists(self.token_path):
         with open(self.token_path, 'rb') as token:
            creds = pickle.load(token)

      # If there are no (valid) credentials available, let the user log in.
      if not creds or not creds.valid:
         if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
         else:
            flow = InstalledAppFlow.from_client_secrets_file(
               self.cred_path,
               ["https://www.googleapis.com/auth/calendar.events"])
            creds = flow.run_local_server()

         # Save the credentials for the next run
         # os.makedirs(os.path.dirname(self.token_path), exist_ok=True)
         with open(self.token_path, 'wb') as token:
            pickle.dump(creds, token)

      service = build('calendar', 'v3', credentials=creds)
      return service

   def add(self, start, end, summary, reminder=0, location="", description="", heldag=False):
      body = {
         'summary': summary,
         'location': location,
         'description': description,
         'start': {
            'timeZone': "Europe/Stockholm"
         },
         'end': {
            'timeZone': "Europe/Stockholm"
         }
      }

      if heldag:
         body['start']['date'] = start.date().isoformat()
         body['end']['date']   = end.date().isoformat()
      else:
         body['start']['dateTime'] = start.isoformat(timespec='seconds'),
         body['end']['dateTime']   = end.isoformat(timespec="seconds"),

      if reminder > 0:
         body['reminders'] = {
            'useDefault': False,
            'overrides': [
               {
                  'method': 'popup',
                  'minutes': reminder
               }
            ]
         }

      #pylint: disable=no-member
      return self.service.events().insert(calendarId='primary', body=body).execute()

def main():
   p = Parser()

   try:
      parsed = p.parse(input())
   except UnexpectedInput as e:
      print(e)
      exit(1)
      # print(e.get_context(inp))

   from pprint import pprint
   # pprint(parsed)

   g = Google()
   ret = g.add(parsed['time']['start'],
               parsed['time']['end'],
               parsed['title'],
               location=parsed.get('place', ""),
               description=parsed.get('description', ""),
               heldag=parsed.get('heldag', False),
               reminder=parsed.get('reminder', 0))
   pprint(ret)

if __name__ == "__main__":
   main()
