#!/usr/bin/python3

# TODO: add documentation

import sys
import subprocess as S
import math
from shutil import which
import os
import stat
import pwd
import grp

uid = os.getuid()
showNames = False
colors = {}
hasCowsay = which("cowsay")
listEmpty = False

def resetColor():
   return "\x1b[0m"

def setColor(c):
   return "\x1b[" + c + "m"

def colorize(s, c, blink=False):
   if not c and not blink:
      return s
   b = ""
   if blink:
      b = (";" if c else "") + "5"
   return setColor(c + b) + s + resetColor()

def formatSize(d):
   suffs = ["B ", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi", "Yi"]
   s = float(d.stat(follow_symlinks=False).st_size)
   if s <= 0:
      out = round(s)
      mag = 0
   else:
      mag = math.floor(math.log(s, 1024))
      if mag == 0:
         out = round(s)
      else:
         d = s/(1024**mag)
         if math.floor(math.log(d, 10) >= 1):
            out = round(d)
         else:
            out = round(10*d)/10

   return str(out) + colorize(suffs[mag], "1;37")

def formatPerms(d):
   sta = d.stat(follow_symlinks=False)
   perms = stat.filemode(sta.st_mode)
   imode = stat.S_IMODE(sta.st_mode)
   permsSplit = None

   def replace(i, c):
      nonlocal permsSplit
      if not permsSplit:
         permsSplit = list(map(str, perms))
      permsSplit[i] = colorize(permsSplit[i], c)

   if imode & stat.S_ISUID:
      replace(3, colors.get("su"))

   if imode & stat.S_ISGID:
      replace(6, colors.get("sg"))

   if stat.S_ISDIR(sta.st_mode):
      if imode & stat.S_ISVTX and imode & stat.S_IWOTH:
         replace(9, colors.get("tw"))
         replace(8, colors.get("tw"))

      elif not imode & stat.S_ISVTX and imode & stat.S_IWOTH:
         replace(8, colors.get("ow"))

      elif imode & stat.S_ISVTX and not imode & stat.S_IWOTH:
         replace(9, colors.get("st"))

   else:
      if imode & stat.S_ISVTX:
         replace(9, "30;43")

   if permsSplit:
      perms = "".join(permsSplit)

   return formatStat(perms[0], True, sta) + "".join(map(lambda x: colorize(x, "1;37") if x == "-" else x, perms[1:]))

def formatGroup(d):
   sta = d.stat(follow_symlinks=False)
   grpid = sta.st_gid
   if grpid != sta.st_uid:
      return [colorize("(", "1;37") + colorize(grp.getgrgid(grpid).gr_name, "33") + colorize(")", "1;37")]
   return []

def formatName(d):
   global uid
   if not showNames:
      return ""

   theid = d.stat(follow_symlinks=False).st_uid
   thename = pwd.getpwuid(theid).pw_name

   if thename == "root" or theid == 0:
      return colorize(thename[0], "1;31")
   elif theid == uid:
      return colorize(thename[0], "1;35")
   return colorize(thename[0], "1;33")

def formatLink(d):
   if not d.is_symlink():
      return []
   p = os.readlink(d.name)
   exists = os.path.exists(p)
   sta = None
   if exists:
      sta = os.stat(p)

   if os.path.islink(p):
      arrow = colorize("->", colors.get("ln"), blink=not exists)
   else:
      arrow = colorize("->", "1;31", blink=not exists)

   return [arrow, formatStat(p, exists, sta)]

def isExec(mode):
   imode = stat.S_IMODE(mode)
   return imode & stat.S_IXUSR or imode & stat.S_IXGRP or imode & stat.S_IXOTH

def formatStat(p, exists, sta):
   if not exists:
      return colorize(p, colors.get("or"))

   mode = sta.st_mode
   if stat.S_ISDIR(mode):
      return colorize(p, colors.get("di"))

   elif stat.S_ISLNK(mode):
      return colorize(p, colors.get("ln"))

   elif stat.S_ISREG(mode) and isExec(mode):
      return colorize(p, colors.get("ex"))

   elif stat.S_ISREG(mode):
      _, ext = os.path.splitext(p)
      return colorize(p, colors.get("*" + ext))

   elif stat.S_ISFIFO(mode):
      return colorize(p, colors.get("pi"))

   elif stat.S_ISSOCK(mode):
      return colorize(p, colors.get("so"))

   elif stat.S_ISBLK(mode):
      return colorize(p, colors.get("bd"))

   elif stat.S_ISCHR(mode):
      return colorize(p, colors.get("cd"))

   return p

def formatEmptyDir(d):
   if not listEmpty:
      return ""

   if (d.is_dir(follow_symlinks=True) and not os.listdir(d.path)) or (d.is_file(follow_symlinks=True) and d.stat(follow_symlinks=True).st_size == 0):
      return colorize("*", "1;33")

   return ""

def formatDirEntry(d):
   return formatStat(d.name, True, d.stat(follow_symlinks=False)) + formatEmptyDir(d)

def formatLine(d):
   return [formatPerms(d), formatName(d), formatSize(d), formatDirEntry(d)] + formatGroup(d) + formatLink(d)

def checkNames(di):
   global showNames
   s = {d.stat(follow_symlinks=False).st_uid for d in di}
   if not (len(s) == 1 and uid in s):
      showNames = True

def removeEmptyColumn(fs, c):
   allEmpty = True
   for l in fs:
      if l[c]:
         allEmpty = False
         break
   if allEmpty:
      for l in fs:
         del l[c]

# fields, column index, alignment (0=left, 1=right)
def align(fs, c, a):
   lens = []
   for l in fs:
      if c >= len(l):
         return
      lens.append(len(l[c]))

   maximum = max(lens)

   for l in fs:
      dlen = maximum - lens[0]
      l[c] = " "*dlen*a + l[c] + " "*dlen*abs(a-1)
      lens = lens[1:]

def cowsay(s):
   if hasCowsay:
      S.run(["cowsay", "-pn"], input=s, encoding="utf-8")
   else:
      print(s)

def parseArguments():
   global listEmpty

   for a in sys.argv:
      if a == "-e" or a == "--list-empty":
         listEmpty = True

def main():
   parseArguments()

   global colors
   colors_raw = os.environ["LS_COLORS"]
   if colors_raw:
      colors = {i[0]: i[1] for i in map(lambda x: x.split("="), filter(None, colors_raw.split(":")))}

   try:
      ite = os.scandir()
   except PermissionError as err:
      cowsay("Can't acces current directory\n" + str(err))
      return 1

   def scanSortName(x):
      x = x.name.lower()
      if x.startswith("."):
         return x[1:]
      return x

   sort = sorted(ite, key=scanSortName)

   if len(sort) <= 0:
      cowsay("There's nothing here...")
      return 0

   checkNames(sort)

   fields = list(map(formatLine, sort))

   align(fields, 1, 1)
   align(fields, 2, 1)

   removeEmptyColumn(fields, 1)

   for f in fields:
      print(" ".join(f))

   ite.close()

if __name__ == "__main__":
   main()
