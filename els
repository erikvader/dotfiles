#!/usr/bin/python3

import sys
import subprocess as S
import locale
import math
import re
from getpass import getuser

username = getuser()
showNames = False

def resetColor():
   return "\x1b[0m"

def setFG(c):
   return "\x1b[" + c + "m"

def colorize(s, c):
   return resetColor() + setFG(c) + s + resetColor()

def formatSize(s):
   suffs = ["B ", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi", "Yi"]
   s = float(s)
   if s <= 0:
      out = round(s)
      mag = 0
   else:
      mag = math.floor(math.log(s, 1024))
      if mag == 0:
         out = round(s)
      else:
         d = s/(1024**mag)
         if math.floor(math.log(d, 10) >= 1):
            out = round(d)
         else:
            out = round(10*d)/10

   return str(out) + colorize(suffs[mag], "1;37")

def formatPerms(p):
   return colorize(p[0], "1;33") + "".join(list(map(lambda x: colorize(x, "1;37") if x == "-" else x, p[1:])))

def formatGroup(n, g):
   if n != g:
      return colorize("(", "1;37") + colorize(g, "33") + colorize(")", "1;37")
   else:
      return ""

def formatName(n):
   if not showNames:
      return ""

   if n == "root":
      return colorize(n[0], "1;31")
   elif n == username:
      return colorize(n[0], "1;35")
   else:
      return colorize(n[0], "1;33")


def formatArrow(fs):
   return list(map(lambda x: colorize(x, "1;31") if x == "->" else x, fs))

def formatLine(l):
   if len(l) < 9:
      return l
   return [formatPerms(l[0]), formatName(l[2]), formatSize(l[4]) + ":"] + formatArrow(l[8:]) + [formatGroup(l[2], l[3])]

def checkNames(fs, c):
   global showNames
   s = {l[c] for l in fs}
   if not (len(s) == 1 and username in s):
      showNames = True

def removeEmptyColumn(fs, c):
   allEmpty = True
   for l in fs:
      if l[c]:
         allEmpty = False
         break;
   if allEmpty:
      for l in fs:
         del l[c]

def strip_ansi_codes(s):
   return re.sub(r'\x1b\[([0-9,A-Z]{1,2}(;[0-9]{1,2})?(;[0-9]{3})?)?[m|K]?', '', s)

def actualLen(s):
   return len(strip_ansi_codes(s))

# fields, column index, alignment (0=left, 1=right)
def align(fs, c, a):
   lens = []
   for l in fs:
      if c >= len(l):
         return
      lens.append(actualLen(l[c]))

   maximum = max(lens)

   for l in fs:
      dlen = maximum - lens[0]
      l[c] = " "*dlen*a + l[c] + " "*dlen*abs(a-1)
      lens = lens[1:]

def main():
   status = S.run(["ls", "-lA", "--color=always"] + sys.argv[1:], stdout=S.PIPE, stderr=S.DEVNULL, stdin=S.DEVNULL, encoding=locale.getpreferredencoding(False))

   if status.returncode != 0:
      print("Something went wrong :( Exited with: ", str(status.returncode), sep='')
      exit(1)

   lines = status.stdout.split("\n")
   lines = lines[1:]

   fields = list(filter(None, map(lambda x: list(filter(None, x.split(" "))), lines)))

   checkNames(fields, 2)
   fields = list(map(formatLine, fields))
   align(fields, 2, 1)
   align(fields, 1, 1)

   removeEmptyColumn(fields, 1)

   for l in fields:
      print(" ".join(l))

if __name__ == "__main__":
   main()
